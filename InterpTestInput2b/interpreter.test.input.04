(define list-reduce
  (lambda(a p ls)
    (if (null? ls)
        a
        (p (car ls) (list-reduce a p (cdr ls))))))

(define list-sum
  (lambda (ls)
    (if (null? ls)
        (quote Empty-List)
        (list-reduce 0 + ls))))

(define list-product
  (lambda (ls)
    (if (null? ls)
        (quote Empty-List)
        (list-reduce 1 * ls))))

(define list-every
  (lambda (p ls)
    (if (null? ls)
        (quote Empty-List)
        (list-reduce #t (and-pred p) ls))))


(define and-pred
  (lambda(p)
    (lambda (x y)
      (and (p x) y))))


(define list-some
  (lambda (p ls)
    (if (null? ls)
        (quote Empty-List)
        (list-reduce #f (or-pred p) ls))))


(define or-pred
  (lambda(p)
    (lambda (x y)
      (or (p x) y))))


(define my-and (lambda (x y)
                 (and x y)))

;;some test cases
(quote(list-reduce 1 + (list 1 2 3)))
(list-reduce 1 + (list 1 2 3))

(quote(list-reduce 1 + ()))
(list-reduce 1 + ())

(quote(list-reduce #t and (list #t #f #t)))
(list-reduce #t my-and (list #t #f #t))

(quote(list-reduce #t and (list #t #t #t)))
(list-reduce #t my-and (list #t #t #t))

(quote(list-sum (list 1 2 3 4)))
(list-sum (list 1 2 3 4))

(quote(list-sum ()))
(list-sum ())

(quote(list-sum (list -1 2 -3 4)))
(list-sum (list -1 2 -3 4))

(quote(list-product (list 3 2 1 4)))
(list-product (list 3 2 1 4))

(quote(list-product ()))
(list-product ())

(quote(list-product (list 2 -3 1)))
(list-product (list 2 -3 1))

(quote(list-every integer? (list 1 2 3 4)))
(list-every integer? (list 1 2 3 4))

(quote(list-every integer? (list 1 2 "a" 4)))
(list-every integer? (list 1 2 "a" 4))

(quote(list-every integer? ()))
(list-every integer? ())

(quote(list-some integer? (list 1 2 3 4)))
(list-some integer? (list 1 2 3 4))

(quote(list-some integer? (list 1 2 "a" 4)))
(list-some integer? (list 1 2 (quote a) 4))

(quote(list-some integer? (list (quote c) (quote b) "a")))
(list-some integer? (list "c" "b" "a"))

(quote(list-some integer? ()))
(list-some integer? ())

;expected =>

;(list-reduce 1 + (list 1 2 3))
;7

;(list-reduce 1 + ())
;1

;(list-reduce #t and (list #t #f #t))
;#f

;(list-reduce #t and (list #t #t #t))
;#t

;(list-sum (list 1 2 3 4))
;10

;(list-sum ())
;Empty-List

;(list-sum (list -1 2 -3 4))
;2

;(list-product (list 3 2 1 4))
;24

;(list-product ())
;Empty-List

;(list-product (list 2 -3 1))
;-6

;(list-every number? (list 1 2 3 4))
;#t

;(list-every number? (list 1 2 "a" 4))
;#f

;(list-every number? ())
;Empty-List

;(list-some number? (list 1 2 3 4))
;#t

;(list-some number? (list 1 2 "a" 4))
;#t

;(list-some number? (list "c" "b" "a"))
;#f

;(list-some number? ())
;Empty-List
